{"version":3,"sources":["scripts/main.js"],"names":["field","score","table","document","querySelector","button","startMessage","loseMessage","winMessage","gameScore","rowsCount","colsCount","isWin","i","j","deepCopyArray","arr","JSON","parse","stringify","isMoved","oldField","moveUp","inputField","movedField","newColumn","move","reverse","length","moveDown","moveRight","newRow","moveLeft","array","movedArr","zerosInStart","filter","cell","unshift","addRandomCell","rowIndex","Math","floor","random","colIndex","renderField","rows","cells","className","classList","add","textContent","addEventListener","contains","remove","e","key"],"mappings":"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","file":"main.4b3191e7.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('tbody');\nconst button = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\n\nconst rowsCount = 4;\nconst colsCount = 4;\nlet field;\nlet score;\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n  } else {\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n  }\n\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  gameScore.textContent = score;\n\n  addRandomCell();\n  addRandomCell();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  const oldField = deepCopyArray(field);\n\n  if (\n    !isMoved(moveUp(oldField))\n    && !isMoved(moveDown(oldField))\n    && !isMoved(moveRight(oldField))\n    && !isMoved(moveLeft(oldField))\n  ) {\n    loseMessage.classList.remove('hidden');\n\n    return false;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      field = deepCopyArray(moveUp(field));\n      break;\n    case 'ArrowDown':\n      field = deepCopyArray(moveDown(field));\n      break;\n    case 'ArrowRight':\n      field = deepCopyArray(moveRight(field));\n      break;\n    case 'ArrowLeft':\n      field = deepCopyArray(moveLeft(field));\n      break;\n  }\n\n  if (isMoved(oldField)) {\n    addRandomCell();\n    gameScore.textContent = `${score}`;\n  }\n\n  if (isWin()) {\n    winMessage.classList.remove('hidden');\n  }\n});\n\nfunction isWin() {\n  for (let i = 0; i < rowsCount; i++) {\n    for (let j = 0; j < colsCount; j++) {\n      if (field[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction deepCopyArray(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\nfunction isMoved(oldField) {\n  for (let i = 0; i < rowsCount; i++) {\n    for (let j = 0; j < colsCount; j++) {\n      if (oldField[i][j] !== field[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction moveUp(inputField) {\n  const movedField = deepCopyArray(inputField);\n\n  for (let i = 0; i < rowsCount; i++) {\n    let newColumn = [\n      movedField[0][i],\n      movedField[1][i],\n      movedField[2][i],\n      movedField[3][i],\n    ];\n\n    newColumn = move(newColumn.reverse()).reverse();\n\n    for (let j = 0; j < newColumn.length; j++) {\n      movedField[j][i] = newColumn[j];\n    }\n  }\n\n  return movedField;\n}\n\nfunction moveDown(inputField) {\n  const movedField = deepCopyArray(inputField);\n\n  for (let i = 0; i < rowsCount; i++) {\n    let newColumn = [\n      movedField[0][i],\n      movedField[1][i],\n      movedField[2][i],\n      movedField[3][i],\n    ];\n\n    newColumn = move(newColumn);\n\n    for (let j = 0; j < newColumn.length; j++) {\n      movedField[j][i] = newColumn[j];\n    }\n  }\n\n  return movedField;\n}\n\nfunction moveRight(inputField) {\n  const movedField = deepCopyArray(inputField);\n\n  for (let i = 0; i < rowsCount; i++) {\n    let newRow = movedField[i];\n\n    newRow = move(newRow);\n\n    for (let j = 0; j < newRow.length; j++) {\n      movedField[i][j] = newRow[j];\n    }\n  }\n\n  return movedField;\n}\n\nfunction moveLeft(inputField) {\n  const movedField = deepCopyArray(inputField);\n\n  for (let i = 0; i < rowsCount; i++) {\n    let newRow = movedField[i];\n\n    newRow = move(newRow.reverse()).reverse();\n\n    for (let j = 0; j < newRow.length; j++) {\n      movedField[i][j] = newRow[j];\n    }\n  }\n\n  return movedField;\n}\n\nfunction move(array) {\n  const movedArr = zerosInStart(array);\n\n  for (let i = movedArr.length; i > 0; i--) {\n    if (movedArr[i] === movedArr[i - 1]) {\n      movedArr[i] += movedArr[i];\n      score += movedArr[i];\n      movedArr[i - 1] = 0;\n    }\n  }\n\n  return zerosInStart(movedArr);\n}\n\nfunction zerosInStart(array) {\n  const movedArr = array.filter((cell) => cell !== 0);\n  const startIndex = movedArr.length;\n\n  for (let i = startIndex; i < array.length; i++) {\n    movedArr.unshift(0);\n  }\n\n  return movedArr;\n}\n\nfunction addRandomCell() {\n  while (true) {\n    const rowIndex = Math.floor(Math.random() * rowsCount);\n    const colIndex = Math.floor(Math.random() * colsCount);\n\n    if (field[rowIndex][colIndex] === 0) {\n      field[rowIndex][colIndex] = Math.random() >= 0.9 ? 4 : 2;\n      break;\n    }\n  }\n\n  renderField();\n}\n\nfunction renderField() {\n  for (let i = 0; i < rowsCount; i++) {\n    for (let j = 0; j < colsCount; j++) {\n      table.rows[i].cells[j].className = '';\n      table.rows[i].cells[j].classList.add('field-cell');\n      table.rows[i].cells[j].classList.add(`field-cell--${field[i][j]}`);\n      table.rows[i].cells[j].textContent = field[i][j] || '';\n    }\n  }\n}\n"]}